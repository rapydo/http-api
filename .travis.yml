os: linux
dist: bionic
language: python
python:
- 3.8
services:
- docker
env:
- PROJECT=irodstest
- PROJECT=celerytest
- PROJECT=neo
- PROJECT=sql
- PROJECT=mongo
- PROJECT=pushpin
- PROJECT=celerybeat
# - PROJECT=apispecs
- PROJECT=wrappedresponse

script:
  - CURRENT_VERSION=$(grep '"version"' src/package.json | awk {'print $2'} | tr -d '", ')
  - pip3 install --upgrade --no-cache-dir git+https://github.com/rapydo/do.git@${CURRENT_VERSION}

  - mkdir $PROJECT
  - cd $PROJECT
  - rapydo create test${PROJECT} --auth postgres --frontend no --services $PROJECT
  - git init
  - git remote add origin https://your_remote_git/your_project.git
  - rapydo init
  - rapydo start
  - sleep 2
  - rapydo -s backend logs
  - rapydo shell backend --command 'restapi tests --core --wait' || travis_terminate 1;
  # Temporary, before standard tests
  - rapydo remove --all
  - cd ..

  # template based tests (old style)
  - BRANCH=$([ -z "$TRAVIS_PULL_REQUEST_BRANCH" ] && echo "$TRAVIS_BRANCH" || echo "$TRAVIS_PULL_REQUEST_BRANCH")
  - git clone -b ${BRANCH} --depth=1 https://github.com/rapydo/tests.git rapydo_tests
  - cd rapydo_tests
  - if [[ "$TRAVIS_PULL_REQUEST" != "false" ]]; then git pull origin $TRAVIS_BRANCH; fi
  - rapydo --project ${PROJECT} init
  - if [[ $TRAVIS_PULL_REQUEST == "false" ]] || [[ $TRAVIS_EVENT_TYPE != "cron" ]]; then rapydo pull; fi
  - rapydo start
  - sleep 2
  - rapydo -s backend logs
  - rapydo shell backend --command 'restapi tests --core --wait' || travis_terminate 1;

  # Continue with tests: coverage & production
  - printf "\n\n\n"
  - rapydo dump
  - printf "\n\n\n"
  - backend_container=$(docker-compose ps -q backend)
  - docker cp ${backend_container}:/code/coverage.xml coverage.xml
  - bash <(curl -s https://codecov.io/bash) -R submodules/http-api
  - printf "\n\n\n"
  - rapydo remove --all
  - printf "\n\n\n"
  - rapydo --production --project ${PROJECT} init --force
  - rapydo pull
  - rapydo start
  - rapydo ssl
  - printf "\n\n\nBackend server is starting\n\n\n"
  - sleep 30
  - rapydo -s backend logs
  - printf "\n\n\n"
  - curl -k -X GET --max-time 5 https://localhost/api/status | grep "Server is alive"
  - printf "\n\n\n"
  - rapydo remove --all

  # - stage: deploy
  #   script: skip
  #   deploy:
  #     provider: pypi
  #     user: pdonorio
  #     password:
  #       secure: YNjvWPNpfab00FD7EUwzDgXyorPFkefCk3C7PFDfB9yDaZFz6d/+Mk+HzJce84pqk0Nr0T8rrKVe7c69Ib+PgiYWrtYstnvKthZbN+IpFieEm/f72adG8rdSjLVb5gLNd49cqxfDIBD64V/DgkrJ5+Xif8j0D7d8CohKRqgFYdsAm0G9TiiAXqbaRGiUqEl6aJo1V2/8tDUNikWu3zCaHiCWYerHBf2IfeCdcsbX3qXwUje+g4ECRFH3kZbVD6YDS+47ib4GBuhJGGRMZDdICdk+MHXP1cRUv2EybmH5Q7cH8DZ+JoMuZNP/gQ3xT2Mt2wZ1n1le0wWfCNpkIdTPuOQTFrtxcZQycjDnVupu+mTDa4XCYgr3N0JFSJBVo9G+gYf9fswrt1BTtVBDpYUb0QGtZehFW+wuftNu10lvuibB1B3o1Vqf2TYO8CEgSfQy0c+VRt3oj0BuXnh+C5BxTFVYJpYoIlkDr4u0nomWosmMRyrSRP8i8CkJg4WEtlB//ZaU+9QkurQW3zPr8HetcRz5eIzX1rJPHLO4XIXGuCnc954OhXa6EaaouAHtGeYwYhYP1/wTtJKlBQUdADoYf37B4U8Mttxd6V9x/uRJXLhyt+hSKPPFsS0/PkRnum/B0Mfa70RPfibvgXxjLhq+vspWYty0J4wpxWJNbAQ7NVU=
  #     on:
  #       tags: true
notifications:
  email: false
  slack:
    rooms:
      secure: WJ0T3PK+e7TPMWuouNFr2/4Aef7HPjr2KHdiVe1QZPrbeFwSohKQRj76GUydn6SRoRw0O1tK6ZYiHeN5wTmlPEHR2MLO3GtenQ9VXEkKwU9Ck25AuQcv2bf1v96g2bd61NwmJjctJn465uUGX410Gw7CT0kxCkVu5oiXFgX3n79mMUNWYiu0Xl31RPLul3ar+Si7pd6GqzvMr4b2jHxNR1osdT4xQBrYrelQV9YGFVnaTrODfd1axj0jB0ISvmVpFEMBFDINYK4Xf+LfmdBNOJ1j57bUXtfl4MmgpauMoD1d+Lk+v1vJMJInaaugvjlbHbc4BxsZeiOmg+Y+gswain50hnbUo/MszmBwlfYLoaavj+T+yZnkakglaaYDat9Hsp+OJvJnmOZWrysfxSylIthhvBca37nRQg2SPfKQRBr9l3PLgvwJkwIhKzzSdVs4w8Uz3To3X6c82bkVC0Q/9yPEky5Wxoiwt+qpxPY6xpndjz2VcHkL1wj8DmTkB1kh1ILJ3ri/Wtah51JlWh3r5VGwszIl6kFt7f4sbSXVH+S9CNBNIp1SGZC3Budwp3af6foYwFc1OCjbLefuGxF1Q0pR4TN46nKB8oeUJ6sM2XQvZWvEmpYvsMs7A17QpGPEz2Wd5Tw5y4P0xmOKikT9AOtx1fZjI92DUNXe9JaPtP4=
  on_success: change # default: always
  on_failure: always # default: always
