name: Test

on:
  push:
  schedule:
    - cron: "0 2 * * *"

jobs:
  build:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        template:
          [
            extra,
            neo4j,
            postgres,
            celery-rabbit-redis,
            celery-rabbit-mongo,
            celery-redis-redis,
            celery-redis-mongo,
            celery-rabbit-rabbit,
            mongo,
            mysql,
          ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install
        run: |
          # Randomize auth service to test some services
          # double neo4j to balance with sql databases
          # mongo is only tested on the mongo TEMPLATE for two reasons:
          #  - no need to test it too much (no project is really using it as backend)
          #  - prevent celery-rabbit-rabbit template to become a celery-rabbit-mongo template
          auth_services=(postgres mysql neo4j neo4j)
          RANDOM_AUTH=${auth_services[$(($RANDOM % ${#auth_services[@]}))]}
          echo "Selected random authentication service = ${RANDOM_AUTH}"

          python -m pip install --upgrade pip
          CURRENT_VERSION=$(grep __version__ restapi/__init__.py | sed 's/__version__ = //' | tr -d '"')
          pip install --upgrade --no-cache-dir git+https://github.com/rapydo/do.git@${CURRENT_VERSION} || travis_terminate 1;
          rapydo --version
      - name: Run Tests
        # env:
        #   LOGURU_LEVEL: DEBUG
        #   TESTING: 1
        run: |
          mkdir ${{ matrix.template }}
          cd ${{ matrix.template }}
          bash ../tests/create_template.sh ${{ matrix.template }}
          rapydo --testing --project prj init
          rapydo pull
          bash ../tests/customize_template.sh ${{ matrix.template }}
          rapydo start
          sleep 25
          rapydo logs
          # This is used to test the bot in dev mode
          # - >
          #   if [[ "${{ matrix.template }}" == "extra" ]]; then
          #     rapydo shell backend --default --detach;
          #     sleep 20;
          #   fi
          rapydo shell --no-tty backend 'restapi tests --core --wait --destroy'

          # Send coverage
          rapydo dump
          backend_container=$(docker-compose ps -q backend)
          docker cp ${backend_container}:/code/coverage.xml coverage.xml
          # bash codecov_report -R submodules/http-api

          # Basic production test
          rapydo remove --all
          rapydo --production --testing init --force
          rapydo pull
          rapydo ssl --volatile
          rapydo start
          # wait for all services to start (25 failed sometimes)
          sleep 30
          rapydo logs
          curl --insecure -X GET --max-time 5 https://localhost/api/status | grep "Server is alive"
          if [[ "${{ matrix.template }}" == "extra" ]]; then
            rapydo -s bot logs --tail 1 | grep "Bot is ready to accept requests";
            rapydo -s bot remove;
          fi
          rapydo -s proxy,backend logs --tail 20

          # Tests in production mode
          rapydo shell --no-tty backend 'restapi tests --core --wait' || travis_terminate 1;
          # Send coverage
          rapydo dump
          backend_container=$(docker-compose ps -q backend)
          docker cp ${backend_container}:/code/coverage.xml coverage.xml
          # bash codecov_report -R submodules/http-api

      # - uses: codecov/codecov-action@v1
      #   with:
      #     file: ./codecov.yml
